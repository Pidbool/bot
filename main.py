import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.utils.markdown import bold

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"  # –ü—Ä–∏–º–µ—Ä URL API Mistral.ai  (—ç—Ç–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π "https://api.chat.mistral.ai/v1/chat")
MISTRAL_API_KEY = "4qhUbVo5GUcyxgn6foLjNR9CI8M7QdfP"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API-–∫–ª—é—á Mistral.ai
TELEGRAM_BOT_TOKEN = "7399343968:AAFOzSCksoOmC5iAQRaex3QAhdQ5q4_PE6M"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–ù–æ–≤—ã–π —á–∞—Ç"))
    builder.add(KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    builder.add(KeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (/start)"))
    return builder.as_markup(resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Mistral.ai API
async def ask_mistral(prompt):
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json",
    }
    data = {
        "model": "mistral-medium",  # –£–∫–∞–∂–∏ –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        "messages": [{"role": "user", "content": prompt}],
    }
    response = requests.post(MISTRAL_API_URL, headers=headers, json=data)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        logger.error(f"–û—à–∏–±–∫–∞ API Mistral.ai: {response.status_code}, {response.text}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!"

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user = message.from_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, {bold(user.first_name)} üòò! –Ø –±–æ—Ç ü§ñ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –æ–¥–Ω–æ–π –∏–∑ –≤–∞–∂–Ω–µ–π—à–∏—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ üß¨üåêüß¨.\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é üëá:\n"
        "1. –û—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ üåê.\n"
        "2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ üë§, —Ç–æ –µ—Å—Ç—å —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id üí°.\n"
        "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å –ø–æ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫.\n\n"
        "–û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —è –Ω–∞—á–Ω—É —Ç—É–ø–∏—Ç—å, —Ç–æ —Ç—ã —Å–º–µ–ª–æ –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–æ–≤—ã–π —á–∞—Ç üí¨' –∏–ª–∏ '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÑ' ! –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —Ç–æ –ø—Ä–æ–≤–µ—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º üåêüõú! –ê –º–æ–∂–µ—Ç, —ç—Ç–æ —è —Ç–∞–∫–æ–π —Ç—É–ø–æ–π –±–æ—Ç, —á—Ç–æ –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å ü•≤."
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ –º–Ω–æ–π!"
    )
    await message.answer(welcome_message, reply_markup=create_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π —á–∞—Ç"
@dp.message(lambda message: message.text == "–ù–æ–≤—ã–π —á–∞—Ç üéâ")
async def new_chat(message: types.Message):
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Çüí¨! –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ üß¨üåêüß¨.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@dp.message(lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§")
async def user_profile(message: types.Message):
    user = message.from_user
    profile_message = (
        f"–¢–≤–æ–π IDüí°: {bold(user.id)}\n"
        "–¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π üí™! –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—èüéâ! –ó–Ω–∞–π —ç—Ç–æ, –∏ —Ç—ã –ø–æ–±–µ–¥–∏—à—å üèÜ!"
    )
    await message.answer(profile_message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (/start)"
@dp.message(lambda message: message.text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÑ(/start)")
async def restart_bot(message: types.Message):
    await start(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_message = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {user_message}")

    if user_message not in ["–ù–æ–≤—ã–π —á–∞—Ç üí¨", "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÑ(/start)"]:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Mistral.ai
        response = await ask_mistral(user_message)
        await message.answer(response)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())